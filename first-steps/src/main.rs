// すべての Rust プログラムは main() をエントリーポイントとして実行される
// main() は引数を受け取らない
// {} により、コードブロック（レキシカルスコープ）が定義される
fn main() {
    // let により変数束縛（variable bindings）を宣言する
    // 変数はデフォルトで不変（immutable）
    let a = 10; // 型をコンパイラに推測させる
    let b: i32 = 20; // 型を変数宣言時にプログラマーが宣言する
    let c = 30i32; // 数値リテラル
    let d = 30_i32; // 数値リテラルにアンダースコアを入れて視認性を高める
    let e = add(add(a, b), add(c, d));

    println!("( a + b ) + ( c + d ) = {}", e);
}

// 関数定義には型宣言が必要
fn add(i: i32, j: i32) -> i32 {
    // 関数は最後の式の結果を返す
    // ここに return を書いてしまうと、i32 ではなく () が返される
    i + j
}
